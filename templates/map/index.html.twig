{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin=""/>
    <style>
        #map {
            height: 100vh;
            border: 2px solid red;

        }
    </style>
{% endblock %}

{% block body %}
    <h1>La Carte du Réseau CTS</h1>
    <div id="map"></div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-tilelayer-wms/dist/leaflet-tilelayer-wms.min.js"></script>
    <script>
        var stopTimesUrlTemplate = "{{ path('horaires_map', {'stopCode': 'stopCode'}) }}";

        document.addEventListener('DOMContentLoaded', function () {
            var mapElement = document.getElementById('map');

            if (mapElement && !mapElement._leaflet_id) {
                var markers = {{ markers | json_encode | raw }};
                var polylines = {{ polylines | json_encode | raw }};
                var map = L.map('map').setView([48.5734053, 7.7521113], 13);

                var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
                    maxZoom: 18
                }).addTo(map);

                
                //AJOUT DES LIGNES - MERCI https://magosm.magellium.com/aide.html

        // Créer les couches WMS pour Tram et Bus
        var wmsLayerTram = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
            layers: 'magosm:france_tram_ltr_routes_line',
            format: 'image/png',
            transparent: true,
            version: '1.3.0'
        }).addTo(map);

        var wmsLayerBus = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
            layers: 'magosm:france_bus_routes_line',
            format: 'image/png',
            transparent: true,
            version: '1.3.0'
        }).addTo(map);

        // Ajoutez les couches WMS au contrôleur de couche
        var baseMaps = {
            "OpenStreetMap": osmLayer,
        };

        var overlayMaps = {
            "Tramways": wmsLayerTram,
            "Bus": wmsLayerBus,
        };

        L.control.layers(baseMaps, overlayMaps).addTo(map);


                var customIcon = L.icon({
                    // iconUrl: 'http://localhost/SymfonyTramStras/png/icons8-tram-30.png',
                    iconUrl: 'http://localhost/SymfonyTramStras/png/location-pin.png',

                    iconSize: [20, 20],
                    iconAnchor: [24, 48],
                    popupAnchor: [-3, -76]
                });

                var userLocationIcon = L.icon({
                    iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/d3/Rond_bleu.png?20140330010413',
                    iconSize: [32, 32],  // Taille de l'icône. Ajustez selon vos besoins.
                    iconAnchor: [16, 16],  // Position de l'icône par rapport à son emplacement.
                });
                

                var customMarkerIcon = L.icon({
                    iconUrl: 'https://img.icons8.com/fluency/48/000000/map-pin.png',
                    iconSize: [48, 48],
                    iconAnchor: [24, 48],
                    popupAnchor: [-3, -76]
                });

                function fadeMarker(marker) {
                    var opacity = 1;
                    var timer = setInterval(function () {
                        if (opacity <= 0) {
                            clearInterval(timer);
                            map.removeLayer(marker);
                        }
                        marker.setOpacity(opacity);
                        opacity -= 0.02;
                    }, 10000);
                }

var lastMarker = null; // ajout de la variable lastMarker

map.on('click', function (e) {
    {% if not app.user %}
        var modal = document.getElementById("myModal");
        modal.style.display = "block";
    {% else %}
        if (lastMarker !== null) { // supprime le dernier marqueur si existant
            lastMarker.remove();
        }

        var marker = L.marker(e.latlng, { icon: customMarkerIcon }).addTo(map);
        lastMarker = marker; // mise à jour de la variable lastMarker

        var popupContent = `
            <form id="textForm">
                <label for="text">Veuillez entrer votre textaire : </label>
                <input type="text" id="text" name="text">
                <input type="submit" value="Submit">
            </form>
        `;
        marker.bindPopup(popupContent).openPopup();

        marker.on('popupclose', function(e) {
            // Supprime le marqueur seulement si l'utilisateur a fermé la popup sans soumettre
            if (lastMarker === marker) {
                marker.remove();
                lastMarker = null; // réinitialise la variable lastMarker
            }
        });

        document.getElementById("textForm").addEventListener('submit', function (event) {
            event.preventDefault();
            var text = document.getElementById('text').value;
            var isConfirmed = confirm("Êtes-vous sûr de vouloir ajouter ce marqueur d'alerte ici ?");
            if (isConfirmed) {
                var url = '{{ path('post_create') }}';
                var formData = new FormData();
                formData.append('lat', e.latlng.lat);
                formData.append('lng', e.latlng.lng);
                formData.append('text', text);

                fetch(url, { method: 'POST', body: formData })
                    .then(function (response) {
                        if (!response.ok) {
                            throw new Error('Erreur HTTP ' + response.status);
                        }
                        console.log('Marqueur enregistré avec succès !');
                        marker.bindPopup(text).openPopup();
                        fadeMarker(marker);
                        lastMarker = null; // mise à jour de la variable lastMarker
                    })
                    .catch(function (error) {
                        console.error('Erreur lors de l\'enregistrement du marqueur :', error);
                    });
            } else {
                // Supprimer immédiatement le marqueur si l'utilisateur n'a pas confirmé
                marker.remove();
                lastMarker = null; // réinitialise la variable lastMarker
            }
        });
    {% endif %}
});



function init() {
    if (Array.isArray(markers) && Array.isArray(polylines)) {
        for (var i = 0; i < markers.length; i++) {
            var markerData = markers[i];

            if (markerData.latitude !== undefined && markerData.longitude !== undefined) {
                var marker;
                if (markerData.isCustom) {
                    marker = L.marker([markerData.latitude, markerData.longitude], { icon: customMarkerIcon }).addTo(map);
                } else {
                    marker = L.marker([markerData.latitude, markerData.longitude], { icon: customIcon }).addTo(map);
                }

                var popupContent = '<strong>' + markerData.stopName + '</strong><br>';
                
                for (var j = 0; j < markerData.linesDestinations.length; j++) {
                    popupContent += markerData.linesDestinations[j] + '<br>';
                }

                // Ajout de la condition
                if (!markerData.isCustom) {
                    var stopTimesUrl = stopTimesUrlTemplate.replace('stopCode', markerData.stopCode);
                    popupContent += '<button class="loadStopTimes" data-stop-url="' + stopTimesUrl + '">Voir les horaires</button>';

                }

                marker.bindPopup(popupContent);
            }
        }

        for (var k = 0; k < polylines.length; k++) {
            var polylineData = polylines[k];
            var lineCoordinates = polylineData.coordinates;

            if (Array.isArray(lineCoordinates) && lineCoordinates.length >= 2) {
                var polyline = L.polyline(lineCoordinates, { color: polylineData.color }).addTo(map);
                polyline.bindPopup(polylineData.lineName);
            }
        }
    } else {
        console.error('Format de données incorrect pour les marqueurs ou les polylignes.');
    }
}

                init();

            }
        });


document.addEventListener('click', function(event) {
    if (event.target && event.target.classList.contains('loadStopTimes')) {
        var stopTimesUrl = event.target.getAttribute('data-stop-url');

        fetch(stopTimesUrl)
        .then(response => response.json())
        .then(data => {
            if (data.stopTimes && data.stopTimes.length > 0) {
                var destination = data.stopTimes[0].destinationName;
                var times = data.stopTimes.map(item => item.expectedDepartureTime);
                var timesHTML = `<strong>Direction: ${destination}</strong><br>` + times.join('<br>');
                
                // Insérez les horaires à l'endroit souhaité, par exemple dans le parent du bouton
                event.target.parentNode.innerHTML = timesHTML;
            } else {
                console.warn('No stop times available');
            }
            
            // Si vous voulez garder le bouton désactivé, assurez-vous de le faire ici, après avoir inséré les horaires
            // event.target.setAttribute('disabled', 'disabled'); 
        })
        .catch(error => {
            console.error('Erreur lors de la récupération des horaires:', error);
        });
    }
});
{# GROUPEMENT POINTS SUPERPOSITIONS #}
{# https://leafletjs.com/2012/08/20/guest-post-markerclusterer-0-1-released.html #}

{# 
// GEOLOCALISATION
// Demande la géolocalisation de l'utilisateur et commence à suivre les mises à jour de position.
navigator.geolocation.watchPosition(success, error);
// en cas de succès
function success(userPosition) {
    // Lorsque la géolocalisation est obtenue avec succès, stocke la latitude et la longitude dans des variables globales.
    window.userLat = userPosition.coords.latitude;
    window.userLng = userPosition.coords.longitude;
    window.isUserLocationKnown = true;
    // Obtient la précision des données de géolocalisation.
    var accuracy = userPosition.coords.accuracy;
    //icon custom pour l'emplacement de l'utilisateur
    var youAreHereIcon = L.icon({
        iconUrl: 'https://png.pngtree.com/png-vector/20230320/ourmid/pngtree-you-are-here-location-pointer-vector-png-image_6656543.png',
        iconSize: [60, 60],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
        shadowAnchor: [22, 94],
    })
    // Ajoute un marqueur sur la carte à l'emplacement de l'utilisateur.
    L.marker([userLat, userLng], {icon: youAreHereIcon, title: 'Vous êtes ici',
        alt: 'Marqueur "vous êtes ici"'}).addTo(map);
    // Ajoute un cercle sur la carte représentant la précision de la position de l'utilisateur.
    // L.circle([userLat, userLng], { radius: accuracy }).addTo(map);
}
https://developer.mozilla.org/fr/docs/Web/API/Geolocation_API
API Geolocation (géolocalisation) - Référence Web API | MDN
L'API Geolocation permet à une personne, si elle le veut, de fournir sa position géographique à une application web. Pour respecter la vie privée, la permission est demandée auprès de l'utilisatric... #}


</script>
{% endblock %}
