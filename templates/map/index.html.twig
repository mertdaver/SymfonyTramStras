{% extends 'base.html.twig' %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin=""/>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.4.1/MarkerCluster.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.4.1/MarkerCluster.Default.css" />
	{# Nominatim (Leaflet Control Geocoder)  #}
	<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
	{# Leaflet Routing Machine #}
	<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
	
	

    <style>
		#map {
			height: 100vh;
			border: 2px solid red;

		}
	</style>
{% endblock %}

{% block body %}
	<h1>La Carte du Réseau CTS</h1>

	{# selecteur mode transport #}
	<select id="routingProfile">
		<option value="car">Voiture</option>
		<option value="bike" selected>Vélo</option>
		<option value="foot">À pied</option>
	</select>
	
	<div id="map"></div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
	<script src="https://unpkg.com/leaflet-tilelayer-wms/dist/leaflet-tilelayer-wms.min.js"></script>
	{# Nominatim (Leaflet Control Geocoder)  #}
	<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
	{# AJAX #}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.4.1/leaflet.markercluster.js"></script>
	{# Leaflet rooting machine #}
	<script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
	
	<script>
		var stopTimesUrlTemplate = "{{ path('horaires_map', {'stopCode': 'stopCode'}) }}";
var userLat = null;
var userLng = null;
var isUserLocationKnown = false;



document.addEventListener('DOMContentLoaded', function () {
var mapElement = document.getElementById('map');

if (mapElement && ! mapElement._leaflet_id) {
var markers = {{ markers | json_encode | raw }};
var polylines = {{ polylines | json_encode | raw }};

// initialise le cadrage de la carte
var map = L.map('map').setView([48.5734053, 7.7521113], 13);

// Tuiles
var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
maxZoom: 18}).addTo(map);

// récupérer la valeur actuellement sélectionnée dans le sélecteur
var selectedProfile = document.getElementById("routingProfile").value;


// on active la gestion d'itinéraires 
var routingControl = L.Routing.control({
	geocoder: L.Control.Geocoder.nominatim(),
	// Style de la ligne d'itinéraire
	lineOptions: {
		styles: [{
			color: '#e47577',
			opacity: 1,
			weight: 10
		}]
	},
	// met le détail de l'itinéraire à prendre en fr
	router: new L.Routing.osrmv1({
		language: 'fr',
		// valeurs acceptés -> 'car', 'bike' ou 'foot'
		profile: selectedProfile
	})
}).addTo(map)

// Selecteur de profile pour itinéraire
// Sélectionnez le sélecteur de mode de transport et créez une copie
var selectClone = document.getElementById('routingProfile').cloneNode(true);

// Définissez un nouvel ID pour éviter des doublons
selectClone.id = "routingProfileCloned";

// Ajoutez le sélecteur cloné à côté des champs d'itinéraire
document.querySelector('.leaflet-routing-geocoders').appendChild(selectClone);

// Écoute les changements du sélecteur cloné pour mettre à jour le profile de l'itinéraire
selectClone.addEventListener('change', function() {
    var newProfile = this.value; // obtenez la nouvelle valeur sélectionnée
    var router = routingControl.getRouter(); // obtenez l'instance du routeur

    // Mette à jour le profil
    router.options.profile = newProfile;
	console.log('Mise à jour de l\'itinéraire avec le profil:', newProfile);
    routingControl.route(); // Re-traitez l'itinéraire avec le nouveau profil
	console.log('Profil sélectionné:', newProfile);
});




// AJOUT DES LIGNES - MERCI https://magosm.magellium.com/aide.html

// Créer les couches WMS pour Tram et Bus
var wmsLayerTram = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
layers: 'magosm:france_tram_ltr_routes_line',
format: 'image/png',
transparent: true,
version: '1.3.0'
}).addTo(map);

var wmsLayerBus = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
layers: 'magosm:france_bus_routes_line',
format: 'image/png',
transparent: true,
version: '1.3.0'
}).addTo(map);

// Ajoutez les couches WMS au contrôleur de couche
var baseMaps = {
"OpenStreetMap": osmLayer
};

var overlayMaps = {
"Tramways": wmsLayerTram,
"Bus": wmsLayerBus
};

L.control.layers(baseMaps, overlayMaps).addTo(map);


var customIcon = L.icon({ // iconUrl: 'http://localhost/SymfonyTramStras/png/icons8-tram-30.png',
iconUrl: 'http://localhost/SymfonyTramStras/public/arret-de-bus.png',

iconSize: [
20, 20
],
iconAnchor: [
24, 48
],
popupAnchor: [-3, -76]
});

var userLocationIcon = L.icon({
iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/d3/Rond_bleu.png?20140330010413',
iconSize: [
32, 32
], // Taille de l'icône. Ajustez selon vos besoins.
iconAnchor: [
16, 16
], // Position de l'icône par rapport à son emplacement.
});


var customMarkerIcon = L.icon({
iconUrl: 'https://img.icons8.com/fluency/48/000000/map-pin.png',
iconSize: [
48, 48
],
iconAnchor: [
24, 48
],
popupAnchor: [-3, -76]
});

function fadeMarker(marker) {
var opacity = 1;
var timer = setInterval(function () {
if (opacity <= 0) {
clearInterval(timer);
map.removeLayer(marker);
}
marker.setOpacity(opacity);
opacity -= 0.02;
}, 10000);
}

var lastMarker = null; // ajout de la variable lastMarker

map.on('click', function (e) {
{% if not app.user %}
var modal = document.getElementById("myModal");
modal.style.display = "block";
{% else %}
if (lastMarker !== null) { // supprime le dernier marqueur si existant
lastMarker.remove();
}

var marker = L.marker(e.latlng, {icon: customMarkerIcon}).addTo(map);

lastMarker = marker; // mise à jour de la variable lastMarker

var popupContent = `
            <form id="textForm">
                <label for="text">Veuillez entrer votre textaire : </label>
                <input type="text" id="text" name="text">
                <input type="submit" value="Submit">
            </form>
        `;
marker.bindPopup(popupContent).openPopup();

marker.on('popupclose', function (e) { // Supprime le marqueur seulement si l'utilisateur a fermé la popup sans soumettre
if (lastMarker === marker) {
marker.remove();
lastMarker = null; // réinitialise la variable lastMarker
}
});

document.getElementById("textForm").addEventListener('submit', function (event) {
event.preventDefault();
var text = document.getElementById('text').value;
var isConfirmed = confirm("Êtes-vous sûr de vouloir ajouter ce marqueur d'alerte ici ?");
if (isConfirmed) {
var url = '{{ path('post_create') }}';
var formData = new FormData();
formData.append('lat', e.latlng.lat);
formData.append('lng', e.latlng.lng);
formData.append('text', text);

fetch(url, {
method: 'POST',
body: formData
}).then(function (response) {
if (! response.ok) {
throw new Error('Erreur HTTP ' + response.status);
}
console.log('Marqueur enregistré avec succès !');
marker.bindPopup(text).openPopup();
fadeMarker(marker);
lastMarker = null; // mise à jour de la variable lastMarker
}).catch(function (error) {
console.error('Erreur lors de l\'enregistrement du marqueur :', error);
});
} else { // Supprimer immédiatement le marqueur si l'utilisateur n'a pas confirmé
marker.remove();
lastMarker = null; // réinitialise la variable lastMarker
}
});{% endif %}
});


function init() {
if (Array.isArray(markers) && Array.isArray(polylines)) {
for (var i = 0; i < markers.length; i++) {
var markerData = markers[i];

if (markerData.latitude !== undefined && markerData.longitude !== undefined) {
var marker;
if (markerData.isCustom) {
marker = L.marker([
markerData.latitude, markerData.longitude
], {icon: customMarkerIcon}).addTo(map);
} else {
marker = L.marker([
markerData.latitude, markerData.longitude
], {icon: customIcon}).addTo(map);
}

var popupContent = '<strong>' + markerData.stopName + '</strong><br>';

for (var j = 0; j < markerData.linesDestinations.length; j++) {
popupContent += markerData.linesDestinations[j] + '<br>';
}

// Ajout de la condition
if (! markerData.isCustom) {
var stopTimesUrl = stopTimesUrlTemplate.replace('stopCode', markerData.stopCode);
popupContent += '<button class="loadStopTimes" data-stop-url="' + stopTimesUrl + '">Voir les horaires</button>';
popupContent += '<button class="getDirections" data-lat="' + markerData.latitude + '" data-lng="' + markerData.longitude + '">M\'y rendre</button>';

}

marker.bindPopup(popupContent);
}
}

for (var k = 0; k < polylines.length; k++) {
var polylineData = polylines[k];
var lineCoordinates = polylineData.coordinates;

if (Array.isArray(lineCoordinates) && lineCoordinates.length >= 2) {
var polyline = L.polyline(lineCoordinates, {color: polylineData.color}).addTo(map);
polyline.bindPopup(polylineData.lineName);
}
}
} else {
console.error('Format de données incorrect pour les marqueurs ou les polylignes.');
}
}

init();

}

if (navigator.geolocation) {
navigator.geolocation.watchPosition(success, error, {
enableHighAccuracy: true,
maximumAge: 30000,
timeout: 27000
});
} else {
console.warn('La géolocalisation n\'est pas supportée par ce navigateur.');
}

function success(userPosition) {
userLat = userPosition.coords.latitude;
userLng = userPosition.coords.longitude;
isUserLocationKnown = true;

var accuracy = userPosition.coords.accuracy;

var youAreHereIcon = L.icon({
iconUrl: 'https://png.pngtree.com/png-vector/20230320/ourmid/pngtree-you-are-here-location-pointer-vector-png-image_6656543.png',
iconSize: [
60, 60
],
iconAnchor: [
30, 30
],
popupAnchor: [
-3, -76
],
shadowAnchor: [22, 94]
});

L.marker([
userLat, userLng
], {
icon: youAreHereIcon,
title: 'Vous êtes ici',
alt: 'Marqueur "vous êtes ici"'
}).addTo(map);
// Optionnel : si vous voulez afficher la précision
L.circle([
userLat, userLng
], {radius: accuracy}).addTo(map);
}

function error(err) {
console.warn('Erreur lors de la récupération de la position : ' + err.message);
}

});


document.addEventListener('click', function (event) {
	// Handler pour loadStopTimes
	if (event.target && event.target.classList.contains('loadStopTimes')) {
		var stopTimesUrl = event.target.getAttribute('data-stop-url');

		fetch(stopTimesUrl)
			.then(response => response.json())
			.then(data => {
				if (data.stopTimes && data.stopTimes.length > 0) {
					var destination = data.stopTimes[0].destinationName;
					var times = data.stopTimes.map(item => item.expectedDepartureTime);
					var timesHTML = `<strong>Direction: ${destination}</strong><br>` + times.join('<br>');

					// Insérez les horaires à l'endroit souhaité, par exemple dans le parent du bouton
					event.target.parentNode.innerHTML = timesHTML;
				} else {
					console.warn('No stop times available');
				}
				// Si vous voulez garder le bouton désactivé, assurez-vous de le faire ici, après avoir inséré les horaires
				// event.target.setAttribute('disabled', 'disabled');
			})
			.catch(error => {
				console.error('Erreur lors de la récupération des horaires:', error);
			});
	}

if (event.target && event.target.classList.contains('getDirections')) {
    if (isUserLocationKnown) {
        var destinationLat = event.target.getAttribute('data-lat');
        var destinationLng = event.target.getAttribute('data-lng');

        // Identifier les éléments de saisie
        var startInput = document.querySelector('.leaflet-routing-geocoder input[placeholder="Start"]');
        var endInput = document.querySelector('.leaflet-routing-geocoder input[placeholder="End"]');
        
        // Affecter les coordonnées à ces éléments de saisie
        if (startInput && endInput) {
            // Suppose que userLat et userLng contiennent la latitude et la longitude de l'utilisateur.
            startInput.value = userLat + ', ' + userLng;
            endInput.value = destinationLat + ', ' + destinationLng;

            // Simuler un appui sur la touche 'Entrer' pour soumettre le formulaire
            var enterKeyEvent = new KeyboardEvent('keydown', {
                key: 'Enter',
                code: 'Enter',
                which: 13,
                keyCode: 13,
                bubbles: true
            });

            endInput.dispatchEvent(enterKeyEvent);  // Déclencher l'événement sur l'élément input "End"

        } else {
            console.warn('Impossible de trouver les éléments de saisie du formulaire.');
        }
    } else {
        alert("Votre position n'est pas encore connue. Veuillez attendre un instant et réessayer.");
    }
}

document.getElementById("routingProfile").addEventListener("change", function() {
    var newProfile = this.value;
    
});

});
</script>
{% endblock %}