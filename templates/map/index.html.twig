{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin=""/>
    <style>
        #map {
            height: 100vh;
            border: 2px solid red;
        }
    </style>
{% endblock %}

{% block body %}
    <h1>La Carte du Réseau CTS</h1>
    <div id="map"></div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-tilelayer-wms/dist/leaflet-tilelayer-wms.min.js"></script>
    <script>
        var stopTimesUrlTemplate = "{{ path('horaires_map', {'stopCode': 'stopCode'}) }}";

        document.addEventListener('DOMContentLoaded', function () {
            var mapElement = document.getElementById('map');

            if (mapElement && !mapElement._leaflet_id) {
                var markers = {{ markers | json_encode | raw }};
                var polylines = {{ polylines | json_encode | raw }};
                var map = L.map('map').setView([48.5734053, 7.7521113], 13);

                var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
                    maxZoom: 18
                }).addTo(map);


                //AJOUT DES LIGNES - MERCI https://magosm.magellium.com/aide.html

        // Créer les couches WMS pour Tram et Bus
        var wmsLayerTram = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
            layers: 'magosm:france_tram_ltr_routes_line',
            format: 'image/png',
            transparent: true,
            version: '1.3.0'
        }).addTo(map);

        var wmsLayerBus = L.tileLayer.wms('https://magosm.magellium.com/geoserver/ows', {
            layers: 'magosm:france_bus_routes_line',
            format: 'image/png',
            transparent: true,
            version: '1.3.0'
        }).addTo(map);

        // Ajoutez les couches WMS au contrôleur de couche
        var baseMaps = {
            "OpenStreetMap": osmLayer,
        };

        var overlayMaps = {
            "Tramways": wmsLayerTram,
            "Bus": wmsLayerBus,
        };

        L.control.layers(baseMaps, overlayMaps).addTo(map);


                var customIcon = L.icon({
                    // iconUrl: 'http://localhost/SymfonyTramStras/png/icons8-tram-30.png',
                    iconUrl: 'http://localhost/SymfonyTramStras/png/location-pin.png',

                    iconSize: [20, 20],
                    iconAnchor: [24, 48],
                    popupAnchor: [-3, -76]
                });

                var customMarkerIcon = L.icon({
                    iconUrl: 'https://img.icons8.com/fluency/48/000000/map-pin.png',
                    iconSize: [48, 48],
                    iconAnchor: [24, 48],
                    popupAnchor: [-3, -76]
                });

                function fadeMarker(marker) {
                    var opacity = 1;
                    var timer = setInterval(function () {
                        if (opacity <= 0) {
                            clearInterval(timer);
                            map.removeLayer(marker);
                        }
                        marker.setOpacity(opacity);
                        opacity -= 0.02;
                    }, 10000);
                }

map.on('click', function (e) {
    {% if not app.user %}
        var modal = document.getElementById("myModal");
        modal.style.display = "block";
    {% else %}
        var marker = L.marker(e.latlng, { icon: customMarkerIcon }).addTo(map);

        var popupContent = `
            <form id="textForm">
                <label for="text">Veuillez entrer votre textaire : </label>
                <input type="text" id="text" name="text">
                <input type="submit" value="Submit">
            </form>
        `;
        marker.bindPopup(popupContent).openPopup();
        fadeMarker(marker);

document.getElementById("textForm").addEventListener('submit', function (event) {
    event.preventDefault();
    var text = document.getElementById('text').value;
    if (text) {
        var isConfirmed = confirm("Êtes-vous sûr de vouloir ajouter ce marqueur d'alerte ici ?");
        if (isConfirmed) {
            var url = '{{ path('post_create') }}';
            var formData = new FormData();
            formData.append('lat', e.latlng.lat);
            formData.append('lng', e.latlng.lng);
            formData.append('text', text);

            fetch(url, { method: 'POST', body: formData })
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Erreur HTTP ' + response.status);
                    }
                    console.log('Marqueur enregistré avec succès !');
                    marker.bindPopup(text).openPopup();
                    fadeMarker(marker);
                })
                .catch(function (error) {
                    console.error('Erreur lors de l\'enregistrement du marqueur :', error);
                });
        }
    }
});
    {% endif %}
                });

function init() {
    if (Array.isArray(markers) && Array.isArray(polylines)) {
        for (var i = 0; i < markers.length; i++) {
    var markerData = markers[i];

    if (markerData.latitude !== undefined && markerData.longitude !== undefined) {
        var marker;
        if (markerData.isCustom) {
            marker = L.marker([markerData.latitude, markerData.longitude], { icon: customMarkerIcon }).addTo(map);
            marker.bindPopup(markerData.text);
        } else {
            marker = L.marker([markerData.latitude, markerData.longitude], { icon: customIcon }).addTo(map);
        }

        var popupContent = '<strong>' + markerData.stopName + '</strong><br>';
        
        for (var j = 0; j < markerData.linesDestinations.length; j++) {
            popupContent += markerData.linesDestinations[j] + '<br>';
        }

        if (!markerData.isCustom) {
            var stopTimesUrl = stopTimesUrlTemplate.replace('stopCode', markerData.stopCode);
            popupContent += '<a href="' + stopTimesUrl + '">Voir les horaires</a>';
            marker.bindPopup(popupContent);
        }
    }
}

        for (var k = 0; k < polylines.length; k++) {
            var polylineData = polylines[k];
            var lineCoordinates = polylineData.coordinates;

            if (Array.isArray(lineCoordinates) && lineCoordinates.length >= 2) {
                var polyline = L.polyline(lineCoordinates, { color: polylineData.color }).addTo(map);
                polyline.bindPopup(polylineData.lineName);
            }
        }
    } else {
        console.error('Format de données incorrect pour les marqueurs ou les polylignes.');
    }
}

                init();

            }
        });
    </script>
{% endblock %}
